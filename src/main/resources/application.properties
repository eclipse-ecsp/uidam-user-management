application.security.disabled=true
app.authorization-server-host-name=${AUTHORIZATION_SERVER_URL:http://uidam-authorization-server:9443}
service.name=${spring_application_servicename:uidam-user-management}
spring.application.version=${spring_application_version:1.0}
spring.application.servicename=${spring_application_servicename:uidam-user-management}
spring.application.name=${spring_application_name:uidam-user-management}


postgres.jdbc.url=${POSTGRES_DATASOURCE:jdbc:postgresql://localhost:5432/uidam_management}
postgres.password=${POSTGRES_PASSWORD:ChangeMe}
postgres.username=${POSTGRES_USERNAME:ChangeMe}
driverClassName=org.hibernate.dialect.PostgreSQLDialect
postgres.max.idle.time=${postgres_max_idle_time:0}
postgres.max.pool.size=${postgres_max_pool_size:30}
postgres.pool.name=hikariConnectionPool
postgres.connection.timeout.ms=${postgres_connection_timeout_ms:60000}
postgres.expected99thPercentileMs=${postgres_expected99thPercentileMs:60000}
postgres.datasource.create.retry.count=${postgres_create_retry_count:3}
postgres.datasource.retry.delay.ms=${postgres_retry_delay:30}
postgres.driver.class.name=org.postgresql.Driver
postgres.data-source-properties.cachePrepStmts=${postgres_data_source_properties_cachePrepStmts:true}
postgres.data-source-properties.prepStmtCacheSize=${postgres_data_source_properties_prepStmtCacheSize:250}
postgres.data-source-properties.prepStmtCacheSqlLimit=${postgres_data_source_properties_prepStmtCacheSqlLimit:2048}
health.postgresdb.monitor.enabled=${health_postgresdb_monitor_enabled:false}
health.postgresdb.monitor.restart.on.failure=${health_postgresdb_monitor_restart_on_failure:false}
metrics.prometheus.enabled=${metrics_prometheus_enabled:false}
postgresdb.metrics.enabled=${postgresdb_metrics_enabled:false}
postgresdb.metrics.executor.shutdown.buffer.ms=${postgresdb_metrics_executor_shutdown_buffer_ms:2000}
postgresdb.metrics.thread.freq.ms=${postgresdb_metrics_thread_freq_ms:5000}
postgresdb.metrics.thread.initial.delay.ms=${postgresdb_metrics_thread_initial_delay_ms:2000}

prometheus.agent.port=${prometheus_agent_port:9100}
prometheus.agent.port.exposed=${prometheus_agent_port_exposed:9100}

spring.jpa.hibernate.ddl-auto=none
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.format_sql=false
spring.jpa.show-sql=${SHOW_SQL:false}

###API GATEWAY Configuration###
api.registry.enabled=${api_registry_enabled:false}
api.registry.service-name=${api_registry_service-name:http://api-registry-int-svc.data-platform}
api.security.enabled=${api_security_enabled:false}
api.gatewayUrls="${api_gatewayUrls:api-gateway3-int-svc.data-platform:7000}"
api.gateway.default.filters="JwtAuthValidator"
server.port=8080
openapi.path.include=${openapi_path_include:/v1/users/**, /v2/users/**, /v1/users/filter, /v1/users/{id}, /v2/users/{id}, /v1/users, /v1/emailVerification/{userId}/isEmailVerified, /v1/oauth2/client/**, /v1/oauth2/client/{clientId}, /v1/oauth2/client, /v1/roles/**, /v1/roles/filter, /v1/roles/{name}, /v1/roles/rolesById, /v1/roles, /v1/scopes/**, /v1/scopes/{name}, /v1/scopes/filter,/v1/accounts/**, /v1/accounts/filter, /v1/accounts/{id}, /v1/accounts, /v1/users/status, /v1/users/external, /v1/users/external/{id}, /v1/users/{user_id}/accountRoleMapping, /v1/self/recovery/resetpassword,/v1/password-policies/**}
openapi.exclude=""
#Actuators
management.endpoint.health.show-details=always
management.endpoint.health.probes.enabled=true
management.health.livenessState.enabled=true
management.health.readinessState.enabled=true

####User Response Configuration ####
app.account-id=${account_id:ecsp}
app.account-name=${account_name:ecsp}
app.account-type=${account_type:}
app.password-encoder=${password_encoder:SHA-256}
app.max-allowed-login-attempts=${max_allowed_login_attempts:3}
app.password-update-time-interval=${password_update_time_interval:500}
app.min-password-length=${min_password_length:10}
app.max-password-length=${max_password_length:50}
app.password-regex-pattern=${password_regex_pattern:^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#&()\u2013[{}]:;',?/*~$^+=<>]).{10,50}$}
app.additional-attr-check-enabled-for-sign-up=${additional_attr_check_enabled_for_sign_up:false}
app.captcha-enforce-after-no-of-failures=${captcha_enforce_after_no_of_failures:}
app.recovery-secret-expires-in-minutes=${recovery_secret_expires_in_minutes:15}
app.password-recovery-notification-id=${password_recovery_notification_id:UIDAM_USER_PASSWORD_RECOVERY}
app.is-user-status-life-cycle-enabled=${is_user_status_life_cycle_enabled:false}
app.email-verification-exp-days=${email_verification_exp_days:7}
app.auth-server-email-verification-response-url=${auth_server_email_verification_response_url:\
  https://localhost:9443/emailVerification/verify}
app.auth-server-reset-response-url=${auth_server_reset_response_url:\
  https://localhost:9443/recovery/reset/}
####User Notification Configuration ####
app.notification.notification-api-url=${notification_api_url:http://notification-api-int-svc:8080/v1/notifications/nonRegisteredUsers}
app.notification.notification-id=${notification_id:uidamCustomEmailTemplate5}

####Email Verification Configuration ####
app.is-email-verification-enabled=${is_email_verification_enabled:false}
app.email-verification-url=${email_verification_url:https://localhost:8080/v1/emailVerification/%s}
app.email-verification-notification-id=${email_verification_notification_id:UIDAM_USER_VERIFY_ACCOUNT}
app.email-regex-pattern-exclude=${email_regex_pattern_exclude:}

###Logging level
logging.level.org.eclipse.ecsp.uidam.usermanagement=INFO
logging.level.org.hibernate.SQL=ERROR
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=ERROR
logging.level.root=INFO

###Graylog Configuration###
APP_GRAYLOG_ENABLED=${GRAYLOG_ENABLE:false}
APP_GRAYLOG_HOST=${GRAYLOG_HOST:graylog.default.svc.cluster.local}
APP_GRAYLOG_PORT=${GRAYLOG_PORT:12201}
APP_NEVER_BLOCK_FOR_GRAYLOG=${NEVER_BLOCK_FOR_GRAYLOG:false}
APP_LOG_FOLDER=${LOG_FOLDER:logs/}
APP_LOG_LEVEL=${LOG_LEVEL:ERROR}
APP_IGNITE_LOG_LEVEL=${IGNITE_LOG_LEVEL:ERROR}
APP_SVC_LOG_LEVEL=${SVC_LOG_LEVEL:ERROR}
APP_STORAGE_LOG_LEVEL=${STORAGE_LOG_LEVEL:ERROR}
APP_SPRING_LOG_LEVEL=${SPRING_LOG_LEVEL:ERROR}
APP_REGISTRY_COMMON_LOG_LEVEL=${REGISTRY_COMMON_LOG_LEVEL:ERROR}
APP_LOG_APPENDER=${LOG_APPENDER:ASYNC-GELF}

#UIDAM Auth
app.auth-server-revoke-token-url=${AUTH_SERVER_REVOKE_TOKEN_URL:/revoke/revokeByAdmin}
app.auth-server-token-url=${AUTH_SERVER_TOKEN_URL:/oauth2/token}
app.client-id=${CLIENT_ID:token-mgmt}
app.client-secret=${CLIENT_SECRET:ChangeMe}

#account management
app.user-default-account-name=${user_default_account_name:userdefaultaccount}

#Registered client
hash.algorithm=SHA-256
client.registration.default.status=approved
client.registration.secret.key=${CLIENT_REGISTRATION_SECRET_KEY:ChangeMe}
client.registration.secret.salt=${CLIENT_REGISTRATION_SECRET_SALT:ChangeMe}
client.refresh.token.validaity.default=3600
client.access.token.validaity.default=3600
client.authorization.code.validaity.default=300

spring.liquibase.change-log=classpath:database.schema/master.xml
spring.jpa.properties.hibernate.default_schema=${UIDAM_DEFAULT_DB_SCHEMA:uidam}
spring.liquibase.default-schema=${UIDAM_DEFAULT_DB_SCHEMA:uidam}
spring.liquibase.parameters.schema=${UIDAM_DEFAULT_DB_SCHEMA:uidam}
#default client secret is ChangeMe
spring.liquibase.parameters.initial.data.client.secret=${INTITIAL_DATA_CLIENT_SECRET:DSKuodh6sAV8moJ/Q2hhbmdlTWWxs1WULqpVsEWm6M+CT7imLoQcQ5PujXI=}
spring.liquibase.parameters.initial.data.user.salt=${INTITIAL_DATA_USER_SALT:ChangeMe}
#default password ChangeMe
spring.liquibase.parameters.initial.data.user.pwd=${INTITIAL_DATA_USER_PWD:LEzn3EOwl2X9E4uAgu0s9FMdiNINJi5E4BafTRDWmoU=}

app.external-user-permitted-roles=${EXTERNAL_USER_PERMITTED_ROLES:VEHICLE_OWNER}
app.external-user-default-status=${EXTERNAL_USER_DEFAULT_STATUS:}

uidam.auth.admin.scope=${UIDAM_AUTH_ADMIN_SCOPE:UIDAMSystem}
management.endpoints.web.exposure.include=health,info,prometheus,metrics

## Notification Configurations
notification.email.provider=${notification_email_provider:internal}
#notification.sms.provider=${notification_sms_provider:internal}
#notification.push.provider=${notification_push_provider:internal}
notification.email.provider.host=${notification_email_provider_host:smtp.gmail.com}
notification.email.provider.port=${notification_email_provider_port:587}
notification.email.provider.username=${notification_email_provider_username:ChangeMe}
notification.email.provider.passwd=${notification_email_provider_passwd:ChangeMe}
notification.email.provider.properties.mail.smtp.auth=${notification_email_provider_properties_mail_smtp_auth:true}
notification.email.provider.properties.mail.smtp.starttls.enabled=${notification_email_provider_properties_mail_smtp_starttls_enable:true}
notification.email.provider.properties.mail.smtp.starttls.required=${notification_email_provider_properties_mail_smtp_starttls_required:true}
notification.email.provider.properties.mail.smtp.ssl.enabled=${notification_email_provider_properties_mail_smtp_ssl_enable:false}
notification.email.provider.properties.mail.debug=${notification_email_provider_properties_mail_debug:false}
#notification config
notification.config.resolver=${notification_config_resolver:internal}
notification.config.path=${notification_config_path:classpath:/notification/uidam-notification-config.json}

# template engine
template.engine=${notification_template_engine:thymeleaf}
template.format=${notification_template_format:HTML}
template.resolver=${notification_template_resolver:CLASSPATH}
template.prefix=${notification_template_prefix:/notification/}
template.suffix=${notification_template_suffix:.html}