application.security.disabled=true
service.name=${spring_application_servicename:uidam-user-management}
spring.application.version=${spring_application_version:1.0}
spring.application.servicename=${spring_application_servicename:uidam-user-management}
spring.application.name=${spring_application_name:uidam-user-management}

postgres.jdbc.url=${POSTGRES_DATASOURCE:jdbc:postgresql://localhost:5432/ChangeMe}
postgres.username=${POSTGRES_USERNAME:ChangeMe}
postgres.password=${POSTGRES_PASSWORD:ChangeMe}
postgres.driver.class.name=org.postgresql.Driver
postgres.pool.name=hikariConnectionPool
postgres.data-source-properties.cachePrepStmts=${postgres_data_source_properties_cachePrepStmts:true}
postgres.data-source-properties.prepStmtCacheSize=${postgres_data_source_properties_prepStmtCacheSize:250}
postgres.data-source-properties.prepStmtCacheSqlLimit=${postgres_data_source_properties_prepStmtCacheSqlLimit:2048}
postgres.max.idle.time=${postgres_max_idle_time:0}
postgres.min.pool.size=${postgres_min_pool_size:15}
postgres.max.pool.size=${postgres_max_pool_size:30}
postgres.connection.timeout.ms=${postgres_connection_timeout_ms:60000}
postgres.expected99thPercentileMs=${postgres_expected99thPercentileMs:60000}
postgres.datasource.create.retry.count=${postgres_create_retry_count:3}
postgres.datasource.retry.delay.ms=${postgres_retry_delay:30}
postgresdb.metrics.enabled=${postgresdb_metrics_enabled:false}
postgresdb.metrics.executor.shutdown.buffer.ms=${postgresdb_metrics_executor_shutdown_buffer_ms:2000}
postgresdb.metrics.thread.freq.ms=${postgresdb_metrics_thread_freq_ms:5000}
postgresdb.metrics.thread.initial.delay.ms=${postgresdb_metrics_thread_initial_delay_ms:2000}

health.postgresdb.monitor.enabled=${health_postgresdb_monitor_enabled:false}
health.postgresdb.monitor.restart.on.failure=${health_postgresdb_monitor_restart_on_failure:false}
metrics.prometheus.enabled=${metrics_prometheus_enabled:false}

prometheus.agent.port=${prometheus_agent_port:9100}
prometheus.agent.port.exposed=${prometheus_agent_port_exposed:9100}

spring.jpa.hibernate.ddl-auto=none
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.default_schema=${UIDAM_DEFAULT_DB_SCHEMA:uidam}
spring.jpa.properties.hibernate.format_sql=false
spring.jpa.show-sql=${SHOW_SQL:false}

# Enable bean definition overriding to resolve dataSource bean conflicts between 
# our MultiTenantDatabaseConfig and PostgresDbConfig from sql-dao dependency
spring.main.allow-bean-definition-overriding=true

###API GATEWAY Configuration###
api.registry.enabled=${api_registry_enabled:false}
api.registry.service-name=${api_registry_service-name:http://api-registry-int-svc.data-platform}
api.security.enabled=${api_security_enabled:false}
api.gatewayUrls="${api_gatewayUrls:api-gateway3-int-svc.data-platform:7000}"
api.gateway.default.filters="JwtAuthValidator"
server.port=8080
openapi.path.include=${openapi_path_include:/v1/users/**, /v2/users/**, /v1/users/filter, /v1/users/{id}, /v2/users/{id}, /v1/users,/*/v1/emailVerification/{userId}/isEmailVerified, /*/v1/emailVerification/{token}, /v1/oauth2/client/**, /v1/oauth2/client/{clientId}, /v1/oauth2/client, /v1/roles/**, /v1/roles/filter, /v1/roles/{name}, /v1/roles/rolesById, /v1/roles, /v1/scopes/**, /v1/scopes/{name}, /v1/scopes/filter,/v1/accounts/**, /v1/accounts/filter, /v1/accounts/{id}, /v1/accounts, /v1/users/status, /v1/users/external, /v1/users/external/{id}, /v1/users/{user_id}/accountRoleMapping, /v1/self/recovery/resetpassword,/v1/password-policies/**}
openapi.exclude=""
#Actuators
management.endpoint.health.show-details=always
management.endpoint.health.probes.enabled=true
management.health.livenessState.enabled=true
management.health.readinessState.enabled=true
management.health.db.enabled=false

###Logging level
logging.level.org.eclipse.ecsp.uidam.usermanagement=INFO
logging.level.org.hibernate.SQL=ERROR
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=ERROR
logging.level.root=INFO

###Graylog Configuration###
APP_GRAYLOG_ENABLED=${GRAYLOG_ENABLE:false}
APP_GRAYLOG_HOST=${GRAYLOG_HOST:graylog.default.svc.cluster.local}
APP_GRAYLOG_PORT=${GRAYLOG_PORT:12201}
APP_NEVER_BLOCK_FOR_GRAYLOG=${NEVER_BLOCK_FOR_GRAYLOG:false}
APP_LOG_FOLDER=${LOG_FOLDER:logs/}
APP_LOG_LEVEL=${LOG_LEVEL:ERROR}
APP_IGNITE_LOG_LEVEL=${IGNITE_LOG_LEVEL:ERROR}
APP_SVC_LOG_LEVEL=${SVC_LOG_LEVEL:ERROR}
APP_STORAGE_LOG_LEVEL=${STORAGE_LOG_LEVEL:ERROR}
APP_SPRING_LOG_LEVEL=${SPRING_LOG_LEVEL:ERROR}
APP_REGISTRY_COMMON_LOG_LEVEL=${REGISTRY_COMMON_LOG_LEVEL:ERROR}
APP_LOG_APPENDER=${LOG_APPENDER:ASYNC-GELF}

#Registered client
hash.algorithm=SHA-256
security.password.policy.check-interval=60s

# Multi-tenant Liquibase Configuration (moved tenant-specific properties to tenant files)
# Enable Spring Boot's Liquibase for custom LiquibaseConfig to work properly
spring.liquibase.enabled=true
uidam.liquibase.change-log.path=${UIDAM_LIQUIBASE_CHANGE_LOG_PATH:classpath:database.schema/master.xml}
uidam.default.db.schema=${UIDAM_DEFAULT_DB_SCHEMA:uidam}

management.endpoints.web.exposure.include=health,info,prometheus,metrics

# Multi-tenant configuration
tenant.ids=${TENANT_IDS:ecsp,sdp}
tenant.default=${TENANT_DEFAULT:ecsp}
tenant.multitenant.enabled=${TENANT_MULTITENANT_ENABLED:false}

spring.config.import=optional:classpath:tenant-ecsp.properties,optional:classpath:tenant-sdp.properties

#Enable/Disable only datadog metrics export
management.datadog.metrics.export.enabled=${metrics_datadog_enabled:false}
management.datadog.metrics.export.api-key=${metrics_datadog_apiKey:api-key}
#If you additionally provide an application key (optional), then metadata such as meter descriptions, types, and base units will also be exported
management.datadog.metrics.export.application-key=${metrics_datadog_applicationKey:applicationKey}
management.datadog.metrics.export.descriptions=${metrics_datadog_descriptions:true}
#If your Datadog project is hosted on one of the other sites, change the URL accordingly
management.datadog.metrics.export.uri=${metrics_datadog_uri:https://api.datadoghq.eu}
management.datadog.metrics.export.step=${metrics_datadog_step:30s}
management.datadog.metrics.export.read-timeout=${metrics_datadog_readTimeout:5s}
management.datadog.metrics.export.connect-timeout=${metrics_datadog_connectTimeout:5s}
management.datadog.metrics.export.batch-size=${metrics_datadog_batchSize:1000}
management.datadog.metrics.export.host-tag=${service.name}
